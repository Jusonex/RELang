package generator

import (
	"bufio"
	"os"
	"strings"
)

type CppCodeEmitter struct {
	OutputFile *os.File
	Writer     *bufio.Writer

	TabIndex      int
	InPublicBlock bool
}

type CppVariable struct {
	Name string
	Type string
}

func NewCppCodeEmitter(path string) *CppCodeEmitter {
	e := new(CppCodeEmitter)
	file, err := os.Create(path)
	if err != nil {
		panic(err)
	}

	e.OutputFile = file
	e.Writer = bufio.NewWriter(e.OutputFile)
	e.TabIndex = 0
	e.InPublicBlock = false

	return e
}

func (s *CppCodeEmitter) Close() {
	s.Writer.Flush()
	s.OutputFile.Close()
}

func (s *CppCodeEmitter) EmitHeader() {
	s.Writer.WriteString("// DO NOT EDIT. THIS FILE IS GENERATED BY THE RELANG COMPILER\n")
}

func (s *CppCodeEmitter) EmitLineComment(comment string) {
	s.EmitIndentation()
	s.Writer.WriteString("// " + comment + "\n")
}

func (s *CppCodeEmitter) EmitSeparator() {
	s.Writer.WriteString(";")
}

func (s *CppCodeEmitter) EmitIndentation() {
	s.Writer.WriteString(strings.Repeat("    ", s.TabIndex))
}

func (s *CppCodeEmitter) EmitLine(line string, separator bool) {
	s.EmitIndentation()

	if separator {
		s.Writer.WriteString(line + ";\n")
	} else {
		s.Writer.WriteString(line + "\n")
	}
}

func (s *CppCodeEmitter) EmitPublicBlock() {
	if !s.InPublicBlock {
		s.TabIndex = s.TabIndex - 1 // temporally step back tab index
		s.EmitLine("public:", false)
		s.TabIndex = s.TabIndex + 1
		s.InPublicBlock = true
	}
}

func (s *CppCodeEmitter) EmitPrivateBlock() {
	if s.InPublicBlock {
		s.TabIndex = s.TabIndex - 1 // temporally step back tab index
		s.EmitLine("private:", false)
		s.TabIndex = s.TabIndex + 1 // temporally step back tab index
		s.InPublicBlock = false
	}
}

func (s *CppCodeEmitter) EmitIncludeStatement(includePath string) {
	s.EmitLine("#include \""+includePath+"\"", false)
}

func (s *CppCodeEmitter) EmitClassDeclarationStart(className string) {
	s.EmitLine("class "+className+"\n{", false)
	s.TabIndex = s.TabIndex + 1
}

func (s *CppCodeEmitter) EmitClassDeclarationEnd() {
	s.TabIndex = s.TabIndex - 1
	s.EmitLine("}", true)
}

func (s *CppCodeEmitter) EmitFunctionDeclaration(functionName string, returnType string, params []CppVariable, memoryAddress string) {
	// TODO
}

func (s *CppCodeEmitter) EmitClassFunctionDeclaration(functionName string, returnType string, params []CppVariable, memoryAddress string) {
	s.EmitPublicBlock()
	s.EmitFunctionDeclaration(functionName, returnType, params, memoryAddress)
}

func (s *CppCodeEmitter) EmitVariableDeclaration(variable CppVariable, memoryOffset string) {
	s.EmitLineComment("offset " + memoryOffset)
	s.EmitLine(variable.Type+" "+variable.Name, true)

	// TODO: Insert pads for correct offsetting
}

func (s *CppCodeEmitter) EmitClassVariableDeclaration(variable CppVariable, memoryOffset string) {
	s.EmitPublicBlock()
	s.EmitVariableDeclaration(variable, memoryOffset)
}
