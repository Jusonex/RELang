package generator

import (
	"bufio"
	"fmt"
	"os"
	"strings"

	"github.com/Jusonex/RELang/pkg/model"
)

type CppCodeEmitter struct {
	OutputFile *os.File
	Writer     *bufio.Writer

	TabIndex int
}

func NewCppCodeEmitter(path string) *CppCodeEmitter {
	e := new(CppCodeEmitter)
	file, err := os.Create(path)
	if err != nil {
		panic(err)
	}

	e.OutputFile = file
	e.Writer = bufio.NewWriter(e.OutputFile)
	e.TabIndex = 0

	return e
}

func (s *CppCodeEmitter) Close() {
	s.Writer.Flush()
	s.OutputFile.Close()
}

func (s *CppCodeEmitter) EmitHeader() {
	s.Writer.WriteString("// DO NOT EDIT. THIS FILE IS GENERATED BY THE RELANG COMPILER\n\n")
}

func (s *CppCodeEmitter) EmitLineComment(comment string) {
	s.EmitIndentation()
	s.Writer.WriteString("// " + comment + "\n")
}

func (s *CppCodeEmitter) EmitSeparator() {
	s.Writer.WriteString(";")
}

func (s *CppCodeEmitter) EmitIndentation() {
	s.Writer.WriteString(strings.Repeat("    ", s.TabIndex))
}

func (s *CppCodeEmitter) EmitLine(line string, separator bool) {
	s.EmitIndentation()

	if separator {
		s.Writer.WriteString(line + ";\n")
	} else {
		s.Writer.WriteString(line + "\n")
	}
}

func (s *CppCodeEmitter) EmitPublicBlock() {
	s.TabIndex = s.TabIndex - 1 // temporally step back tab index
	s.EmitLine("public:", false)
	s.TabIndex = s.TabIndex + 1
}

func (s *CppCodeEmitter) EmitPrivateBlock() {
	s.TabIndex = s.TabIndex - 1 // temporally step back tab index
	s.EmitLine("private:", false)
	s.TabIndex = s.TabIndex + 1
}

func (s *CppCodeEmitter) EmitIncludeStatement(includePath string) {
	s.EmitLine("#include \""+includePath+"\"", false)
}

func (s *CppCodeEmitter) EmitClassDeclarationStart(className string, baseClasses []string) {
	if len(baseClasses) > 0 {
		baseClassEnumeration := strings.Join(baseClasses, ", public ")
		s.EmitLine(fmt.Sprintf("class %s : public %s\n{", className, baseClassEnumeration), false)
	} else {
		s.EmitLine(fmt.Sprintf("class %s\n{", className), false)
	}
	s.TabIndex = s.TabIndex + 1
}

func (s *CppCodeEmitter) EmitClassDeclarationEnd() {
	s.TabIndex = s.TabIndex - 1
	s.EmitLine("}", true)
}

func (s *CppCodeEmitter) EmitFunctionDeclaration(functionName string, returnType string, params []model.Parameter, memoryAddress uint64, callingConv string, inClass bool) {
	s.EmitLine(fmt.Sprintf("inline %s %s(%s)", returnType, functionName, CppFunctionParametersToString(params)), false)
	s.EmitLine("{", false)
	s.TabIndex = s.TabIndex + 1

	if inClass {
		params = append([]model.Parameter{model.Parameter{Name: "this", Type: "decltype(this)"}}, params...)
	}

	s.EmitLine(fmt.Sprintf("using Func_t = %s(%s *)(%s)", returnType, callingConv, CppFunctionParameterTypesToString(params)), true)
	s.EmitLine(fmt.Sprintf("auto f = reinterpret_cast<Func_t>(0x%x)", memoryAddress), true)
	s.EmitLine(fmt.Sprintf("return f(%s)", CppFunctionParameterNamesToString(params)), true)

	s.TabIndex = s.TabIndex - 1
	s.EmitLine("}\n", false)
}

func (s *CppCodeEmitter) EmitVirtualFunctionDeclaration(functionName string, returnType string, params []model.Parameter, memoryOffset uint64, callingConv string) {
	s.EmitLine(fmt.Sprintf("virtual %s %s(%s) = 0", returnType, functionName, CppFunctionParametersToString(params)), true)
}

func (s *CppCodeEmitter) EmitVariableDeclaration(name string, variableType string, memoryOffset uint64) {
	s.EmitLine(fmt.Sprintf("%s %s; // offset 0x%X", variableType, name, memoryOffset), false)
}
